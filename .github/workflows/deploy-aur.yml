name: Deploy to AUR

on:
  push:
    paths:
      - 'PKGBUILD'
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/main')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: Setup SSH for AUR
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts

    - name: Validate PKGBUILD syntax
      run: |
        # Basic PKGBUILD syntax validation
        if ! grep -q "^pkgname=" PKGBUILD; then
          echo "ERROR: pkgname not found in PKGBUILD"
          exit 1
        fi
        if ! grep -q "^pkgver=" PKGBUILD; then
          echo "ERROR: pkgver not found in PKGBUILD"
          exit 1
        fi
        if ! grep -q "^pkgrel=" PKGBUILD; then
          echo "ERROR: pkgrel not found in PKGBUILD"
          exit 1
        fi
        if ! grep -q "^arch=" PKGBUILD; then
          echo "ERROR: arch not found in PKGBUILD"
          exit 1
        fi
        echo "‚úÖ PKGBUILD syntax validation passed"

    - name: Clone AUR repository and compare PKGBUILD content
      run: |
        git clone ssh://aur@aur.archlinux.org/note-gen.git aur-repo

        # Check if .SRCINFO was updated together with PKGBUILD
        echo "Checking if .SRCINFO was updated together with PKGBUILD..."

        # Get files changed in the last commit with fallback
        if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only HEAD~1 HEAD)
          echo "Checking files changed in last commit..."
        else
          echo "No previous commit found, checking staged files..."
          CHANGED_FILES=$(git diff --cached --name-only)
        fi

        PKGBUILD_CHANGED=false
        SRCINFO_CHANGED=false

        for file in $CHANGED_FILES; do
          if [ "$file" = "PKGBUILD" ]; then
            PKGBUILD_CHANGED=true
          fi
          if [ "$file" = ".SRCINFO" ]; then
            SRCINFO_CHANGED=true
          fi
        done

        echo "PKGBUILD changed: $PKGBUILD_CHANGED"
        echo "SRCINFO changed: $SRCINFO_CHANGED"

        if [ "$PKGBUILD_CHANGED" = true ] && [ "$SRCINFO_CHANGED" = false ]; then
          echo "‚ùå ERROR: PKGBUILD was modified but .SRCINFO was not updated!"
          echo "Please run 'makepkg --printsrcinfo > .SRCINFO' in Arch Linux env"
          echo "and commit both PKGBUILD and .SRCINFO together."
          exit 1
        fi

        echo "‚úÖ Both PKGBUILD and .SRCINFO were updated together"

        # Compare local PKGBUILD with AUR PKGBUILD content
        echo "Comparing local PKGBUILD with AUR PKGBUILD content..."
        if ! diff PKGBUILD aur-repo/PKGBUILD > /dev/null 2>&1; then
          echo "‚úÖ PKGBUILD content has changes, proceeding with pkgrel calculation"
        else
          echo "‚ÑπÔ∏è PKGBUILD content is identical to AUR, no changes needed"
          echo "NO_CHANGES=true" >> $GITHUB_ENV
        fi

        if [ "$NO_CHANGES" != "true" ]; then
          # Get current version and pkgrel from local PKGBUILD
          LOCAL_VERSION=$(grep "^pkgver=" PKGBUILD | cut -d'=' -f2)
          LOCAL_PKGREL=$(grep "^pkgrel=" PKGBUILD | cut -d'=' -f2)

          echo "Local version: $LOCAL_VERSION, pkgrel: $LOCAL_PKGREL"

          # Get version and pkgrel from AUR PKGBUILD
          cd aur-repo
          AUR_VERSION=$(grep "^pkgver=" PKGBUILD | cut -d'=' -f2)
          AUR_PKGREL=$(grep "^pkgrel=" PKGBUILD | cut -d'=' -f2)

          echo "AUR version: $AUR_VERSION, pkgrel: $AUR_PKGREL"

          # Calculate correct pkgrel based on AUR state
          if [ "$LOCAL_VERSION" = "$AUR_VERSION" ]; then
            # Same version: increment AUR pkgrel
            NEW_PKGREL=$((AUR_PKGREL + 1))
            echo "Same version, incrementing pkgrel from $AUR_PKGREL to $NEW_PKGREL"
          else
            # Different version: reset pkgrel to 1
            NEW_PKGREL=1
            echo "Different version ($LOCAL_VERSION vs $AUR_VERSION), resetting pkgrel to 1"
          fi

          echo "LOCAL_VERSION=$LOCAL_VERSION" >> $GITHUB_ENV
          echo "NEW_PKGREL=$NEW_PKGREL" >> $GITHUB_ENV

          # Check and update pkgrel in our submitted PKGBUILD and .SRCINFO if needed
          cd ..

          # Get current pkgrel from our submitted PKGBUILD
          LOCAL_PKGREL=$(grep "^pkgrel=" PKGBUILD | cut -d'=' -f2)
          echo "Our PKGBUILD pkgrel: $LOCAL_PKGREL, calculated pkgrel: $NEW_PKGREL"

          # Update pkgrel in both files if needed
          if [ "$LOCAL_PKGREL" != "$NEW_PKGREL" ]; then
            echo "Updating pkgrel from $LOCAL_PKGREL to $NEW_PKGREL in both files"
            sed -i "s/^pkgrel=.*/pkgrel=$NEW_PKGREL/" PKGBUILD
            sed -i "s/\tpkgrel = .*/\tpkgrel = $NEW_PKGREL/" .SRCINFO
            echo "Updated both PKGBUILD and .SRCINFO with correct pkgrel"
          else
            echo "PKGBUILD already has correct pkgrel, no updates needed"
          fi
        else
          echo "‚ÑπÔ∏è Skipping pkgrel calculation and file updates - no changes detected"
        fi

    - name: Commit pkgrel update to GitHub repository
      if: env.NO_CHANGES != 'true'
      run: |
        git config user.name "ChHsich"
        git config user.email "hsichingchang@gmail.com"

        # Add changes first
        git add PKGBUILD .SRCINFO

        # Check if there are actually changes to commit
        if git diff --cached --quiet; then
          echo "‚ÑπÔ∏è No changes to commit, possibly due to sync conflicts"
        else
          # Commit changes
          git commit -m "üîñ chore(aur): update pkgrel to ${{ env.NEW_PKGREL }} based on AUR state"

          # Pull any remote changes and merge
          git pull origin main

          # Push to GitHub
          git push origin main
        fi

    - name: Deploy to AUR
      if: env.NO_CHANGES != 'true'
      run: |
        cd aur-repo

        # Copy updated package files
        cp ../PKGBUILD ../.SRCINFO ./
        # Copy install file if it exists
        if [ -f "../note-gen.install" ]; then
          cp ../note-gen.install ./
        fi

        # Check for changes
        if git diff --quiet && git diff --cached --quiet; then
          echo "‚ÑπÔ∏è No changes to deploy"
        else

        # Configure Git for AUR
        git config user.name "ChHsich"
        git config user.email "hsichingchang@gmail.com"

        # Commit and push to AUR master branch
        git add PKGBUILD .SRCINFO
        # Add install file if it exists
        if [ -f "note-gen.install" ]; then
          git add note-gen.install
        fi
        git commit -m "üîñ chore(aur): update to version ${{ env.LOCAL_VERSION }}-${{ env.NEW_PKGREL }}"
        git push origin master
        fi

    - name: Clean up SSH keys
      if: always()
      run: |
        rm -rf ~/.ssh
