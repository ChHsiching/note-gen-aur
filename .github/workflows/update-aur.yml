name: Update AUR Package

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  update-package:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update PKGBUILD version
      run: |
        NEW_VERSION="${{ inputs.version }}"
        CURRENT_VERSION=$(grep "^pkgver=" PKGBUILD | cut -d'=' -f2)

        if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
          # Same version, increment pkgrel
          CURRENT_PKGREL=$(grep "^pkgrel=" PKGBUILD | cut -d'=' -f2)
          NEW_PKGREL=$((CURRENT_PKGREL + 1))
          sed -i "s/^pkgrel=.*/pkgrel=$NEW_PKGREL/" PKGBUILD
        else
          # New version, reset pkgrel to 1
          sed -i "s/^pkgver=.*/pkgver=$NEW_VERSION/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
        fi

    - name: Update source URL
      run: |
        NEW_VERSION="${{ inputs.version }}"
        # Update source URL with new version
        sed -i "s/note-gen-v[0-9.]*/note-gen-v$NEW_VERSION/" PKGBUILD

    - name: Download source and generate checksum
      run: |
        # Extract source URL from PKGBUILD
        SOURCE_URL=$(grep "source=" PKGBUILD | sed 's/.*"\(.*\)".*/\1/' | head -1)
        echo "Downloading source from: $SOURCE_URL"

        # Download source file
        FILENAME=$(basename "$SOURCE_URL")
        curl -L -o "$FILENAME" "$SOURCE_URL"

        # Generate checksum
        CHECKSUM=$(sha256sum "$FILENAME" | cut -d' ' -f1)
        echo "Generated checksum: $CHECKSUM"

        # Update checksum in PKGBUILD
        sed -i "s/sha256sums=.*/sha256sums=('$CHECKSUM')/" PKGBUILD

    - name: Generate .SRCINFO
      run: |
        # Extract values from PKGBUILD
        CHECKSUM=$(grep "sha256sums=" PKGBUILD | sed "s/sha256sums=('//; s/')//")
        VERSION=$(grep "^pkgver=" PKGBUILD | cut -d'=' -f2)
        PKGREL=$(grep "^pkgrel=" PKGBUILD | cut -d'=' -f2)

        # Generate .SRCINFO using multiple echo commands for better readability
        {
          echo "pkgbase = note-gen"
          echo -e "\tpkgdesc = A cross-platform Markdown note-taking application with AI integration"
          echo -e "\tpkgver = $VERSION"
          echo -e "\tpkgrel = $PKGREL"
          echo -e "\turl = https://github.com/codexu/note-gen"
          echo -e "\tarch = x86_64"
          echo -e "\tlicense = MIT"
          echo -e "\tmakedepends = rust"
          echo -e "\tmakedepends = cargo"
          echo -e "\tmakedepends = nodejs"
          echo -e "\tmakedepends = npm"
          echo -e "\tmakedepends = pnpm"
          echo -e "\tdepends = gtk3"
          echo -e "\tdepends = webkit2gtk-4.1"
          echo -e "\tdepends = libappindicator-gtk3"
          echo -e "\tdepends = librsvg"
          echo -e "\tdepends = libvips"
          echo -e "\tprovides = note-gen"
          echo -e "\tconflicts = note-gen-bin"
          echo -e "\toptions = !strip"
          echo -e "\tsource = note-gen-$VERSION.tar.gz::https://github.com/codexu/note-gen/archive/note-gen-v$VERSION.tar.gz"
          echo -e "\tsha256sums = ($CHECKSUM)"
          echo ""
          echo "pkgname = note-gen"
        } > .SRCINFO

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        VERSION="${{ inputs.version }}"
        git add PKGBUILD .SRCINFO
        git commit -m "ðŸ”– chore(aur): update to version $VERSION"
        git push