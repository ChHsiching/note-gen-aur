name: Check Upstream Updates

on:
  schedule:
    # 每小时检查一次更新
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  check-update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Get current version
      run: |
        CURRENT_VERSION=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
        echo "Current version: $CURRENT_VERSION"
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

    - name: Check upstream release
      run: |
        # Get latest release from GitHub API
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/codexu/note-gen/releases/latest" | jq -r '.tag_name' | sed 's/note-gen-v//')

        echo "Latest release: $LATEST_RELEASE"
        echo "Current version: $CURRENT_VERSION"

        if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ] && [ -n "$LATEST_RELEASE" ]; then
          echo "NEW_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "✅ New version available: $LATEST_RELEASE"
        else
          echo "ℹ️ No updates available"
          exit 0
        fi

    - name: Update PKGBUILD and .SRCINFO for new version
      if: env.NEW_VERSION
      run: |
        NEW_VERSION="${{ env.NEW_VERSION }}"

        # Update PKGBUILD
        sed -i "s/^pkgver=.*/pkgver=$NEW_VERSION/" PKGBUILD
        sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD

        # Update source URL
        sed -i "s/note-gen-v[0-9.]*/note-gen-v$NEW_VERSION/" PKGBUILD

        # Download new source and generate checksum
        SOURCE_URL=$(grep "source=" PKGBUILD | sed 's/.*"\(.*\)".*/\1/' | head -1)
        echo "Downloading source from: $SOURCE_URL"

        FILENAME=$(basename "$SOURCE_URL")
        curl -L -o "$FILENAME" "$SOURCE_URL"

        CHECKSUM=$(sha256sum "$FILENAME" | cut -d' ' -f1)
        echo "Generated checksum: $CHECKSUM"

        sed -i "s/sha256sums=.*/sha256sums=('$CHECKSUM')/" PKGBUILD

        # Generate .SRCINFO manually
        {
          echo "pkgbase = note-gen"
          echo -e "\tpkgdesc = A cross-platform Markdown note-taking application with AI integration"
          echo -e "\tpkgver = $NEW_VERSION"
          echo -e "\tpkgrel = 1"
          echo -e "\turl = https://github.com/codexu/note-gen"
          echo -e "\tarch = x86_64"
          echo -e "\tlicense = MIT"
          echo -e "\tmakedepends = rust"
          echo -e "\tmakedepends = cargo"
          echo -e "\tmakedepends = nodejs"
          echo -e "\tmakedepends = npm"
          echo -e "\tmakedepends = pnpm"
          echo -e "\tmakedepends = pkgconf"
          echo -e "\tmakedepends = clang"
          echo -e "\tdepends = gtk3"
          echo -e "\tdepends = webkit2gtk-4.1"
          echo -e "\tdepends = libappindicator-gtk3"
          echo -e "\tdepends = librsvg"
          echo -e "\tdepends = libvips"
          echo -e "\tdepends = libxcb"
          echo -e "\tdepends = libxrandr"
          echo -e "\tprovides = note-gen"
          echo -e "\tconflicts = note-gen-bin"
          echo -e "\toptions = !strip"
          echo -e "\tsource = note-gen-$NEW_VERSION.tar.gz::https://github.com/codexu/note-gen/archive/note-gen-v$NEW_VERSION.tar.gz"
          echo -e "\tsha256sums = ($CHECKSUM)"
          echo ""
          echo "pkgname = note-gen"
        } > .SRCINFO

        echo "Updated PKGBUILD and .SRCINFO for version $NEW_VERSION"

    - name: Commit version update
      if: env.NEW_VERSION
      run: |
        git config user.name "ChHsich"
        git config user.email "hsichingchang@gmail.com"

        NEW_VERSION="${{ env.NEW_VERSION }}"
        git add PKGBUILD .SRCINFO
        git commit -m "🚀 chore(upstream): update to version $NEW_VERSION"
        git push origin main

        echo "Version $NEW_VERSION committed and pushed"