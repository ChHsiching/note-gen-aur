name: Check Upstream Updates

on:
  schedule:
    # ÊØèÂ∞èÊó∂Ê£ÄÊü•‰∏ÄÊ¨°Êõ¥Êñ∞
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  check-update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Get current version
      run: |
        CURRENT_VERSION=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
        echo "Current version: $CURRENT_VERSION"
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

    - name: Check upstream release
      run: |
        # Get latest release from GitHub API
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/codexu/note-gen/releases/latest" |
                         jq -r '.tag_name' | sed 's/note-gen-v//')

        echo "Latest release: $LATEST_RELEASE"
        echo "Current version: $CURRENT_VERSION"

        if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ] && [ -n "$LATEST_RELEASE" ]; then
          echo "NEW_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "‚úÖ New version available: $LATEST_RELEASE"
        else
          echo "‚ÑπÔ∏è No updates available"
          exit 0
        fi

    - name: Update PKGBUILD and .SRCINFO for new version
      if: env.NEW_VERSION
      run: |
        NEW_VERSION="${{ env.NEW_VERSION }}"

        # Update PKGBUILD
        sed -i "s/^pkgver=.*/pkgver=$NEW_VERSION/" PKGBUILD
        sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD

        # Update source URL in PKGBUILD
        sed -i "s/note-gen-v[0-9.]*/note-gen-v$NEW_VERSION/" PKGBUILD

        # Construct source URL for new version
        SOURCE_URL="note-gen-$NEW_VERSION.tar.gz::https://github.com/codexu/note-gen/archive/note-gen-v$NEW_VERSION.tar.gz"
        echo "Downloading source from: $SOURCE_URL"

        # Set filename for download
        FILENAME="note-gen-$NEW_VERSION.tar.gz"
        curl -L -o "$FILENAME" "$SOURCE_URL"

        CHECKSUM=$(sha256sum "$FILENAME" | cut -d' ' -f1)
        echo "Generated checksum: $CHECKSUM"

        sed -i "s/sha256sums=.*/sha256sums=('$CHECKSUM')/" PKGBUILD

        # Update .SRCINFO using template approach
        # Use current .SRCINFO as template and update key fields
        sed -i "s/\tpkgver = .*/\tpkgver = $NEW_VERSION/" .SRCINFO
        sed -i "s/\tpkgrel = .*/\tpkgrel = 1/" .SRCINFO
        sed -i "s/note-gen-v[0-9.]*/note-gen-v$NEW_VERSION/g" .SRCINFO
        sed -i "s/\tsha256sums = .*/\tsha256sums = $CHECKSUM/" .SRCINFO

        echo "Updated PKGBUILD and .SRCINFO for version $NEW_VERSION"

    - name: Commit version update
      if: env.NEW_VERSION
      run: |
        git config user.name "ChHsich"
        git config user.email "hsichingchang@gmail.com"

        NEW_VERSION="${{ env.NEW_VERSION }}"
        git add PKGBUILD .SRCINFO
        git commit -m "üöÄ chore(upstream): update to version $NEW_VERSION"
        git push origin main

        echo "Version $NEW_VERSION committed and pushed"
